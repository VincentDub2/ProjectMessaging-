
func nb_feuille(a : arbBinT)-> Int{
	if (ab_Vide(a)){
		return 0
	}
	else if (ab_vide(sad(a)) && (ab_vide(sag(a)))){
		return 1
	}
	else {
		return nb_feuille(sad(a)) + nb_feuille(sag(a))
	}
}


fonction profondeur(arbre: ArbBinT, element:  ArbBintT) -> Int
    if arbre_vide(arbre) {
        return -1
    }


    if racine_actuelle == element {
        return 0
    }

    else if (ab_vide(sad(a)) && (ab_vide(sag(a)))){
		return -1
	}

    profondeur_gauche = profondeur(sag(arbre), element)

    profondeur_droite = profondeur(sad(arbre), element)

    if profondeur_gauche == -1 et profondeur_droite == -1 alors
        return -1

    else if profondeur_gauche == -1 alors
        return 1 + profondeur_droite

    else if profondeur_droite == -1 alors
        return 1 + profondeur_gauche

    return 1 + max(profondeur_gauche, profondeur_droite)



    fonction profondeur(a: ArbBinT, b: T) -> Int
        si a == b alors
          retourne 0
        sinon si ab_vide(a) alors
            retourne -1
        fin si

        prof_gauche = profondeur(sag(a), b)
        prof_droite = profondeur(sad(a), b)

        si prof_gauche == -1 et prof_droite == -1 alors
            retourne -1
        fin si

        retourne 1 + max(prof_gauche, prof_droite)
    fin fonction

1) oui il a l'air de fonctionner 
2) Utilise la recurvité et cours
3) On calcule deux fois la profondeur / Il faudrait la stocker puis verifié avec if et puis faire le max

fonction hauteur(arbre: ArbBinT) -> Int

    si ab_vide(arbre) alors
        retourne -1
    fin si

    retourne 1 + max(hauteur(sag(arbre)),hauteur(sad(arbre)))

fin fonction


fonction Largeur (arbre : arbBintT){

    File = creer-file ()
    File = enfiler(File,arbre)

    while !file-vide(vide){
       elm = defiler(File)
       traitement(elm)
       si !(ab_vide(sag(elm))){
            file= enlifer(sag(elm)
       }
       si !(ab_vide(sad(elm))){
            file= enlifer(sad(elm)
       }
    }
}

n*o(delifer())


